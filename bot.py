import disnake
from disnake.ext import commands
import ollama
import psutil
import GPUtil
from disnake.ui import Button, View
import concurrent.futures
import asyncio

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
with open("token.txt", "r") as f:
    TOKEN = f.read().strip()

# –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
MODEL = 'llama3.1'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = commands.Bot(intents=disnake.Intents.all())

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
AUTHORIZED_USER_ID = 805442059178737664

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
messages = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot_character = {}

# –°–æ–∑–¥–∞–µ–º ThreadPoolExecutor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
executor = concurrent.futures.ThreadPoolExecutor()

def get_context_id(ctx):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)."""
    if isinstance(ctx.channel, disnake.DMChannel):
        return ctx.author.id
    return ctx.guild.id

def get_system_character(context_id):
    return {'role': 'system', 'content': f"{bot_character[context_id]}"}

async def generate_summary(messages_context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."""
    summary = await asyncio.get_event_loop().run_in_executor(
        executor, lambda: ollama.chat(model=MODEL, messages=[
            {'role': 'system', 'content': 'Please summarize the following conversation, highlighting the key points and important information. Make sure the summary is concise and captures the essence of the conversation.'}
        ] + messages_context)
    )
    return summary['message']['content']

async def generate_response(chat_history):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    response = await asyncio.get_event_loop().run_in_executor(
        executor, lambda: ollama.chat(model=MODEL, messages=chat_history)
    )
    return response['message']['content']

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    context_id = get_context_id(message)
    if context_id not in messages:
        messages[context_id] = []
        bot_character[context_id] = "–¢–≤–æ—ë –∏–º—è –õ–∏–Ω–≥–≤–∞!" # Speak ONLY in Russian.

    if bot.user.mentioned_in(message):
        message.content = message.content.replace(f"<@{bot.user.id}>", "")


    if bot.user.mentioned_in(message) or isinstance(message.channel, disnake.DMChannel):
         # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages[context_id].append({'role': 'system', 'content': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@{message.author.id}>({message.author.name}) –≤ –∫–∞–Ω–∞–ª–µ <#{message.channel.id}>({message.channel.name}) –Ω–∞–ø–∏—Å–∞–ª:'})
        messages[context_id].append({'role': 'user', 'content': f"{message.content}"})
        print(f'System: User <@{message.author.id}>({message.author.name}) in channel <#{message.channel.id}>({message.channel.name})')
        print(f"User: {message.content}")

        chat_history = [get_system_character(context_id)] + messages[context_id]
        
        async with message.channel.typing():
            response_content = await generate_response(chat_history)
        
        messages[context_id].append({'role': 'assistant', 'content': response_content})
        await message.reply(response_content)

        print(f"Ai: {response_content}")

    await bot.process_commands(message)

@bot.slash_command(
    name="ping", 
    description="–û—Ç–≤–µ—Ç–∏—Ç Pong!"
)
async def ping(inter: disnake.ApplicationCommandInteraction):
    await inter.response.send_message("Pong!")

@bot.slash_command(
    name="set", 
    description="–ò–∑–º–µ–Ω—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
)
async def set(inter: disnake.ApplicationCommandInteraction, character: str):
    if not isinstance(inter.channel, disnake.DMChannel) and not inter.author.guild_permissions.manage_guild or not AUTHORIZED_USER_ID:
        await inter.response.send_message("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –±–æ—Ç–∞.", ephemeral=True)
        return

    async def button_callback(interaction):
        context_id = get_context_id(inter)
        bot_character[context_id] = character
        messages[context_id] = []
        await inter.delete_original_response()
        await interaction.response.send_message(f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ```{character}``` –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.", ephemeral=True)

    view = View()
    yes_button = Button(label="–î–∞", style=disnake.ButtonStyle.danger)
    yes_button.callback = button_callback
    no_button = Button(label="–ù–µ—Ç", style=disnake.ButtonStyle.gray, disabled=False)

    async def no_button_callback(interaction):
        await inter.delete_original_response()
        await interaction.response.send_message("‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=True)

    no_button.callback = no_button_callback
    view.add_item(yes_button)
    view.add_item(no_button)

    await inter.response.send_message(
        f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞?\n–≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è!",
        view=view,
        ephemeral=True
    )

@bot.slash_command(
    name="view",
    description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
)
async def view(inter: disnake.ApplicationCommandInteraction):
    context_id = get_context_id(inter)
    character = bot_character.get(context_id, "–•–∞—Ä–∞–∫—Ç–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await inter.response.send_message(f"üîç –¢–µ–∫—É—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞: ```{character}```", ephemeral=True)

@bot.slash_command(
    name="reset",
    description="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä"
)
async def reset(inter: disnake.ApplicationCommandInteraction):
    if not isinstance(inter.channel, disnake.DMChannel) and not inter.author.guild_permissions.manage_guild or not AUTHORIZED_USER_ID:
        await inter.response.send_message("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", ephemeral=True)
        return

    context_id = get_context_id(inter)
    messages[context_id] = []
    await inter.response.send_message("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞.")

@bot.slash_command(
    name="info", 
    description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
)
async def info(inter):
    memory_info = psutil.virtual_memory()
    gpus = GPUtil.getGPUs()

    gpu_info = ""
    for gpu in gpus:
        gpu_info += f"GPU {gpu.id}: {gpu.load * 100:.1f}%\n"

    embed = disnake.Embed(
        title=str(bot.user),
        description=(
            "Lingua ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–µ–º—ã–π —á–∞—Ç–±–æ—Ç. –ì–æ—Ç–æ–≤ –ø–æ–±–æ–ª—Ç–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã, –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É.\n\n"
            "```yaml\n"
            f"RAM: {memory_info.percent}%\n"
            f"{gpu_info}"
            f"MODEL: {MODEL}\n"
            "```\n"
        ),
        color=660265
    )
    embed.set_thumbnail(url="https://qwa.su/chatbot/logo-t.png")
    embed.set_footer(text="Lingua v0.5.1 ¬© Qwaderton Software, 2024")
    
    await inter.response.send_message(embed=embed)


@bot.slash_command(
    name="shutdown",
    description="–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"
)
async def shutdown(inter: disnake.ApplicationCommandInteraction):
    if inter.author.id != AUTHORIZED_USER_ID:
        await inter.response.send_message("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.", ephemeral=True)
        return
    
    await inter.response.send_message("üîå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    await bot.close()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.run(TOKEN)
